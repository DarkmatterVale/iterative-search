import gensim
from ..topic_analyzer import TopicAnalyzer

class LDATopicAnalyzer(TopicAnalyzer):

    def __init__(self, logger=None, corpus=None, num_topics=None, dictionary=None, passes=None, workers=None, random_state=None):
        """
        :param logger: logger object
        :type logger: loguru.logger
        :param corpus: corpus for the analyzer
        :type corpus: BOW corpus
        :param num_topics: number of topics that will be generated by the LDA model
        :type num_topics: int
        :param dictionary: dictionary of all words
        :type dictionary: gensim.corpora.Dictionary
        :param passes: number of iterations used to develop LDA model
        :type passes: int
        :param workers: number of workers to use when training
        :type workers: int
        :param random_state: random state seed
        :type random_state: int
        """
        self.logger = logger

        self.corpus = corpus
        self.dictionary = dictionary
        self.num_topics = num_topics
        self.passes = passes
        self.workers = workers
        self.random_state = random_state

        self.lda_model = None

        self.is_model_trained = False

    def train_model(self):
        self.lda_model =  gensim.models.LdaMulticore(
            self.corpus,
            num_topics = self.num_topics,
            id2word = self.dictionary,
            passes = self.passes,
            workers = self.workers,
            random_state = self.random_state)

        self.is_model_trained = True

    def predict_topics(self, doc_bow):
        self.verify_model_trained()

        return self.lda_model[doc_bow]

    def get_topics(self):
        self.verify_model_trained()

        return self.lda_model.print_topics(-1)

    def log_topics(self):
        for idx, topic in self.get_topics():
            self.logger.info("Topic: {} \nWords: {}".format(idx, topic ))

    def load_model(self, filename):
        self.lda_model = gensim.models.LdaMulticore.load(filename)

        self.is_model_trained = True

    def save_model(self, filename):
        self.lda_model.save(filename)

    def verify_model_trained(self):
        if not self.is_model_trained:
            raise ValueError("Cannot get topics of an untrained LDA model")
